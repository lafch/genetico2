package net.uch.tablaSistema.managedBeans;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import javax.faces.model.SelectItem;
import javax.servlet.http.HttpSession;
import net.uch.commonService.ServiceFinder;
import net.uch.mapping.TbRoles;
import net.uch.mapping.TbUsuario;
import net.uch.tablaSistema.hibernateSpringDao.HSUsuarioDAO;

public class bUsuario {

    private int id_usu;
//    private String devuelveUsuario;
    private String usu_usu;
    private String usu_psw;
    private String mensajes;
    private int usu_tipo_id;
//    private String usu_tipo;
    private boolean caja;
    private boolean admin;
    private boolean valida;
    private boolean academica;
    private boolean operador;
    private boolean admincl;
    private String usuario_u;
    private String password_u;
    private int rol_id;
    private Integer usu_rol_id;
    private SelectItem[] usu_rol_descripcion;
    private String nivel;
    private List<bUsuario> listUsuarios;
    private String bus_usuario;
    private String oncomplete;
    private bMenu menu;

    public bUsuario() {
        /*ExternalContext context = FacesContext.getCurrentInstance().getExternalContext();
        HttpSession 	session = (HttpSession)context.getSession(false);
        session.setAttribute("usuario", this);*/
    }

    public String getOncomplete() {
        return oncomplete;
    }

    public void setOncomplete(String oncomplete) {
        this.oncomplete = oncomplete;
    }

    public bMenu getMenu() {
        return menu;
    }

    public void setMenu(bMenu menu) {
        this.menu = menu;
    }

    public List<bUsuario> getListUsuarios() {
        return listUsuarios;
    }

    public void setListUsuarios(List<bUsuario> listUsuarios) {
        this.listUsuarios = listUsuarios;
    }

    public String getBus_usuario() {
        return bus_usuario;
    }

    public void setBus_usuario(String bus_usuario) {
        this.bus_usuario = bus_usuario;
    }

    public int getId_usu() {
        return id_usu;
    }

    public void setId_usu(int id_usu) {
        this.id_usu = id_usu;
    }

    public String getUsu_usu() {
        return usu_usu;
    }

    public void setUsu_usu(String usu_usu) {
        this.usu_usu = usu_usu;
    }

    public String getUsu_psw() {
        return usu_psw;
    }

    public void setUsu_psw(String usu_psw) {
        this.usu_psw = usu_psw;
    }

    public String checkUser() throws SQLException, IOException {
        //System.out.println("chaeck");
        HSUsuarioDAO dao = (HSUsuarioDAO) ServiceFinder.findBean("SpringHibernateDaoUsuario");
        TbUsuario usua;
        if ((usua = dao.validateUser(getUsu_usu(), getUsu_psw())) != null) {
            this.usu_usu = usua.getUsuUsuario();
            this.usu_psw = usua.getUsuPassword();
            this.id_usu = usua.getId();
            this.rol_id = usua.getRol().getId();
            this.setNivel(usua.getUsuNivel());
            this.usu_tipo_id = usua.getUsuTipoId();
            this.admin = false;
            this.caja = false;
            this.academica = false;
            this.operador = false;
            this.admincl = false;
            if (usua.getRol().getRolTipo().equals("admin") || usua.getRol().getRolTipo().equals("recursos_humanos")) {
                if(usua.getRol().getRolTipo().equals("admin")){
                this.admin = true;
                this.valida=true;
                }else{
                    this.valida=true;
                }
                
            } else if (usua.getRol().getRolTipo().equals("caja")) {
                this.caja = true;
            } else if (usua.getRol().getRolTipo().equals("academica")) {
                this.academica = true;
            } else if (usua.getRol().getRolTipo().equals("operador")) {
                this.operador = true;
            } else if (usua.getRol().getRolTipo().equals("admin_cursos_libres")) {
                this.admincl = true;
            }

            ExternalContext context = FacesContext.getCurrentInstance().getExternalContext();
            HttpSession session = (HttpSession) context.getSession(false);
            session.setAttribute("usuario", this);
            if (usua.getRol().getRolTipo().equals("admin")) {
                session.setMaxInactiveInterval( 60 * 60 * 8 );
            }
            //System.out.println("ok");
            this.setMenu(new bMenu(usua.getRol().getId(), usua.getUsuUsuario()));

            return "ok";
        } else {
            this.setMensajes("Usuario o Password es incorrecto");
           //System.out.println("error");
            return "error";
        }
    }

    public boolean validar() {
        if (this.usuario_u.trim().length() == 0) {
            return false;
        } else if (this.password_u.trim().length() == 0) {
            return false;
        } else if (this.usu_rol_id == 0) {
            return false;
        } else {
            return true;
        }
    }

    public void crearUsuario(ActionEvent event) throws Exception {
        this.setOncomplete("");
        if (validar()) {
            HSUsuarioDAO dao = (HSUsuarioDAO) ServiceFinder.findBean("SpringHibernateDaoUsuario");
            TbUsuario usuario = new TbUsuario();
            usuario.setUsuActivo("1");
            usuario.setUsuUsuario(this.getUsuario_u());
            usuario.setUsuPassword(this.getPassword_u());
            usuario.setUsuVigente("1");
            usuario.setUsuTipo("1");
            usuario.setUsuTipoId(1);
            usuario.setUsuNivel("1");
            usuario.setUsuPsw(this.getPassword_u());
            usuario.setRol(new TbRoles(this.getUsu_rol_id()));
            dao.crearUsuario(usuario);
            this.setOncomplete("alert('Usuario creado correctamente');"
                    + "Richfaces.hideModalPanel('mp')");
        } else {
            this.setOncomplete("alert('Ingrese todos los campos');");
        }
    }

    public String getMensajes() {
        return mensajes;
    }

    public String ExitSis() {
        String volver = "";
        HttpSession session = (HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false);
        session.invalidate();
        volver = "exit";
        return volver;
    }

    public void setMensajes(String mensajes) {
        this.mensajes = mensajes;
    }

    public int getUsu_tipo_id() {
        return usu_tipo_id;
    }

    public void setUsu_tipo_id(int usu_tipo_id) {
        this.usu_tipo_id = usu_tipo_id;
    }

    public String getDevuelveUsuario() {
        ExternalContext context = FacesContext.getCurrentInstance().getExternalContext();
        HttpSession session1 = (HttpSession) context.getSession(false);
        bUsuario usu = (bUsuario) session1.getAttribute("usuario");
        return usu.getUsu_usu();
    }

    public boolean isCaja() {
        return caja;
    }

    public boolean isAdmin() {
        return admin;
    }
    public boolean isValida() {
        return valida;
    }

    public String getUsuario_u() {
        return usuario_u;
    }

    public void setUsuario_u(String usuario_u) {
        this.usuario_u = usuario_u;
    }

    public String getPassword_u() {
        return password_u;
    }

    public void setPassword_u(String password_u) {
        this.password_u = password_u;
    }

    public void Nuevo() {
        usuario_u = "";
        password_u = "";
        usu_rol_id = 0;
    }

    public String cerrar() {
        HttpSession session = (HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(true);
        //session.invalidate();
        //session.removeAttribute("usuario");

        Enumeration atributos = session.getAttributeNames();
        while (atributos.hasMoreElements()) {
            session.removeAttribute((String) atributos.nextElement());
        }
        session.invalidate();

        return "index";
    }

    public boolean isAcademica() {
        return academica;
    }

    public void setAcademica(boolean academica) {
        this.academica = academica;
    }

    public int getRol_id() {
        return rol_id;
    }

    public void setRol_id(int rol_id) {
        this.rol_id = rol_id;
    }

    public SelectItem[] getUsu_rol_descripcion() {
        HSUsuarioDAO dao = (HSUsuarioDAO) ServiceFinder.findBean("SpringHibernateDaoUsuario");

        List<TbRoles> roles = dao.getRoles();
        usu_rol_descripcion = new SelectItem[roles.size() + 1];
        usu_rol_descripcion[0] = new SelectItem(0, "[Seleccione]");

        for (int i = 0; i < roles.size(); i++) {
            TbRoles rol = roles.get(i);
            usu_rol_descripcion[i + 1] = new SelectItem(rol.getId(), rol.getRolTipo());
        }
        return usu_rol_descripcion;
    }

    public void setUsu_rol_descripcion(SelectItem[] usu_rol_descripcion) {
        this.usu_rol_descripcion = usu_rol_descripcion;
    }

    public Integer getUsu_rol_id() {
        return usu_rol_id;
    }

    public void setUsu_rol_id(Integer usu_rol_id) {
        this.usu_rol_id = usu_rol_id;
    }

    public String getNivel() {
        return nivel;
    }

    public void setNivel(String nivel) {
        this.nivel = nivel;
    }

    public boolean isOperador() {
        return operador;
    }

    public void setOperador(boolean operador) {
        this.operador = operador;
    }

    public String Seleccionar() throws Exception, SQLException, IOException {
        String status;
        status = "ok";
        HSUsuarioDAO dao = (HSUsuarioDAO) ServiceFinder.findBean("SpringHibernateDaoUsuario");

        List<TbUsuario> ltbu;
        ltbu = dao.getListUsuario(this.bus_usuario);
        this.setListUsuarios(new ArrayList());
        if (ltbu != null) {
            for (int g = 0; g < ltbu.size(); g++) {
                //if((usua= dao.validateUser(getUsu_usu(),getUsu_psw()))!=null){
                TbUsuario usua = ltbu.get(g);
                bUsuario bU = new bUsuario();
                bU.usu_usu = usua.getUsuUsuario();
                bU.usu_psw = usua.getUsuPassword();
                bU.id_usu = usua.getId();
                bU.rol_id = usua.getRol().getId();
                bU.nivel = usua.getUsuNivel();
                bU.usu_tipo_id = usua.getUsuTipoId();
                bU.admin = false;
                bU.caja = false;
                bU.academica = false;
                bU.operador = false;
                bU.admincl = false;
                if (usua.getRol().getRolTipo().equals("admin")) {
                    bU.admin = true;
                } else if (usua.getRol().getRolTipo().equals("caja")) {
                    bU.caja = true;
                } else if (usua.getRol().getRolTipo().equals("academica")) {
                    bU.academica = true;
                } else if (usua.getRol().getRolTipo().equals("operador")) {
                    bU.operador = true;
                } else if (usua.getRol().getRolTipo().equals("admin_cursos_libres")) {
                    bU.admincl = true;
                }
                this.listUsuarios.add(bU);
            }
        }

        return status;
    }

    public boolean isAdmincl() {
        return admincl;
    }

    public void setAdmincl(boolean admincl) {
        this.admincl = admincl;
    }
}
