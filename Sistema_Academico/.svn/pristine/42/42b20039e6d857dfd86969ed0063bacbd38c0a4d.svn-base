package net.uch.cursoLibre.hibernateSpringDao;

import java.util.List;
import net.uch.mapping.ClAlumno;
import net.uch.mapping.ClHoraria;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

public class HSHorarioDAOImpl extends HibernateDaoSupport implements HSHorarioDAO {

    @Override
    public List<ClHoraria> seleccionarHorario(int sec_id) throws Exception {
        return this.getSession().createCriteria(ClHoraria.class).
                add(Restrictions.eq("horActivo", "1")).
                add(Restrictions.eq("clSeccion.secId", sec_id)).list();
    }

    @Override
    public void insertarHorario(ClHoraria horario) throws Exception {
        this.getHibernateTemplate().save(horario);
    }

    @Override
    public void actualizarHorario(ClHoraria horario) throws Exception {
        this.getHibernateTemplate().update(horario);
    }

    @Override
    public void insertarActualizarHorarios(List<ClHoraria> horarias) {
        this.getHibernateTemplate().saveOrUpdateAll(horarias);
    }

    @Override
    public void eliminarHorario(int hor_id) throws Exception {
        String hqlUpdate = "update ClHoraria set horActivo = :newName where horId = :oldName";
        this.getSession().createQuery(hqlUpdate).setString("newName", "0").
                setString("oldName", "" + hor_id).
                executeUpdate();
    }

    @Override
    public void eliminarHorarios(List<Integer> hor_ids) {
        String hqlUpdate = "update ClHoraria "
                + "set horActivo = '0' "
                + "where horId in (:v_id)";

        this.getSession().createQuery(hqlUpdate).
                setParameterList("v_id", hor_ids).executeUpdate();
    }
    @Override
    public void eliminarHorariosPorSecId( int iSecId ) { 
        String hqlUpdate = "update ClHoraria "
                + "set horActivo = '0' "
                + "where clSeccion.secId = :v_id";

        this.getSession().createQuery(hqlUpdate).
                setInteger( "v_id", iSecId).executeUpdate();
    }

    @Override
    public List<ClAlumno> matriculadosSeccion(int sec_id) {
        return this.getSession().createCriteria(ClAlumno.class, "ClAlumno").
                createCriteria("ClAlumno.clMatriculas", "ClMatricula").
                createCriteria("ClMatricula.clMatriculaTallers", "ClMatriculaTaller").
                add(Restrictions.eq("ClMatriculaTaller.mattalActivo", "1")).
                add(Restrictions.eq("ClMatricula.matActivo", "1")).
                add(Restrictions.eq("ClMatricula.matTipo", "022001")).
                add(Restrictions.eq("ClAlumno.aluActivo", "1")).
                add(Restrictions.eq("ClMatriculaTaller.clSeccion.secId", sec_id)).
                addOrder(Order.asc("ClAlumno.aluAppaterno")).list();
    }


 @Override
    public List<ClAlumno> prematriculadosSeccion(int sec_id) {
        return this.getSession().createCriteria(ClAlumno.class, "ClAlumno").
                createCriteria("ClAlumno.clMatriculas", "ClMatricula").
                createCriteria("ClMatricula.clMatriculaTallers", "ClMatriculaTaller").
                add(Restrictions.eq("ClMatriculaTaller.mattalActivo", "1")).
                add(Restrictions.eq("ClMatricula.matActivo", "1")).
                add(Restrictions.eq("ClMatricula.matTipo", "022005")).
                add(Restrictions.eq("ClAlumno.aluActivo", "1")).
                add(Restrictions.eq("ClMatriculaTaller.clSeccion.secId", sec_id)).
                addOrder(Order.asc("ClAlumno.aluAppaterno")).list();
    }

    @Override

    public List seleccionarHorariosXTallerApe(int tal_id) throws Exception {
        List<ClHoraria> l = this.getSession().createCriteria(ClHoraria.class, "ClHoraria").
                createCriteria("ClHoraria.clSeccion", "ClSeccion").
                createCriteria("ClSeccion.clTallerAperturado", "ClTallerAperturado").
                add(Restrictions.eq("ClTallerAperturado.clTaller.talId", tal_id)).
                //                add(Restrictions.eq("ClHoraria.horActivo", "1")).
               // addOrder(Order.asc("ClHoraria.horDia")).list();
                addOrder(Order.desc("ClSeccion.secFinicio")).
                addOrder(Order.asc("ClSeccion.secNombre")).
                addOrder(Order.asc("ClHoraria.horDia")).list();

        /*cl_ho sec;
        ClHora*/



        /*String hqlSelect = "SELECT DISTINCT h.horDia,h.horHini,h.horHfin FROM ClHoraria h "
        + "WHERE h.clSeccion.secId  IN(SELECT s.secId FROM ClSeccion s WHERE s.clTallerAperturado.talapeId = 10)";

        /*String hqlSelect = "SELECT DISTINCT c.CatDescripcionElemento,h.horHini,h.horHfin FROM ClHoraria h,TbCatalogo c "
        + "WHERE (h.horDia = CONCAT(c.CatCodigoGrupo,c.CatCodigoElemento))"
        + " AND h.clSeccion.secId  IN(SELECT s.secId FROM ClSeccion s WHERE s.clTallerAperturado.talapeId = 10)";*/


        //List<ClHoraria > l = this.getSession().createQuery(hqlSelect).list();
        /*System.out.println("Tamanio lista : " + l.size());
        if (!l.isEmpty()) {
            ArrayList<ClHoraria> lista = new ArrayList<ClHoraria>(l);

            System.out.println("#JTV : " + lista.get(1).getHorDia() + " - " + lista.get(1).getHorHini().toString() + lista.get(1).getHorHfin().toString());
        }*/

        return l;
        /*return this.getSession().createCriteria(ClHoraria.class,"ClHoraria").
        createCriteria("ClHoraria.clSeccion","ClSeccion").
        createCriteria("ClSeccion.clTallerAperturado","ClTallerAperturado").
        setProjection(
        Projections.distinct(Projections.projectionList())
        ).
        add(Restrictions.eq("ClTallerAperturado.talapeId", talape_id)).
        list();*/

    }
}
