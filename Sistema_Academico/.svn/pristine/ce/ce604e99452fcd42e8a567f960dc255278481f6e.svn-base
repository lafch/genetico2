package net.uch.academica.managedBeans;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;
import java.util.Set;
import javax.faces.component.UIOutput;
import javax.faces.component.UIParameter;
import javax.faces.event.ActionEvent;
import javax.faces.model.SelectItem;
import net.uch.academica.hibernateSpringDao.HSAperturaCursosDAO;
import net.uch.academica.hibernateSpringDao.HSDocenteDAO;
import net.uch.academica.hibernateSpringDao.HSHorarioDAO;
import net.uch.academica.hibernateSpringDao.HSMatriculaDAO;
import net.uch.academica.hibernateSpringDao.HSSeccionDAO;
import net.uch.academica.hibernateSpringDao.HSTurnoDAO;
import net.uch.academica.hibernateSpringDao.HSTurnoDetalleDAO;
import net.uch.commonService.ServiceFinder;
import net.uch.mapping.AcAula;
import net.uch.mapping.AcCursoAperturado;
import net.uch.mapping.AcDocente;
import net.uch.mapping.AcEspecialidad;
import net.uch.mapping.AcFacultad;
import net.uch.mapping.AcHorario;
import net.uch.mapping.AcSeccion;
import net.uch.mapping.AcSemestre;
import net.uch.mapping.AcTurno;
import net.uch.mapping.AcTurnoDetalle;
import net.uch.mapping.TbCatalogo;
import net.uch.tablaSistema.hibernateSpringDao.HSAulaDAO;
import net.uch.tablaSistema.hibernateSpringDao.HSCatalogoDAO;
import net.uch.tablaSistema.hibernateSpringDao.HSFacultadDAO;
import net.uch.tablaSistema.hibernateSpringDao.HSSemestreDAO;
import net.uch.util.ObjNodeGnral;
import org.richfaces.component.UITree;
import org.richfaces.event.NodeSelectedEvent;
import org.richfaces.model.TreeNode;
import org.richfaces.model.TreeNodeImpl;

public class bHorario {

    private TreeNode arbol;
    private String nodoSeleccionado;
    private List listaSecciones;
    private int id_sem;
    private int id_sec;
    private String codigo_sec;
    private String nombre_sec;
    private int vacantes_sec;
//    private String cur_ape_nombre;
    private int id_sem_horario;
    private List tablaHorario;
    private int id_hor;
    private String inicio_hor;
    private String fin_hor;
    private String lunes_hor = "";
    private String martes_hor = "";
    private String miercoles_hor = "";
    private String jueves_hor = "";
    private String viernes_hor = "";
    private String sabado_hor = "";
    private String domingo_hor = "";
    private int id_sec_horario;
    private SelectItem[] comboTurnos;
    private int turno_id;
    public SelectItem[] comboAulas;
    public SelectItem[] comboTipos;
    public int aula_id;
    public String tipo_id;
    public int docente_id;
    public SelectItem[] comboDocentes;
    private String oncomplete;
    public int indice_id_lun = 0;
    public int indice_id_mar = 0;
    public int indice_id_mie = 0;
    public int indice_id_jue = 0;
    public int indice_id_vie = 0;
    public int indice_id_sab = 0;
    public int indice_id_dom = 0;
    private String vacantesOcupadas;
    private List<ObjNodeGnral> nodos;
    private String n_cur_aperturado;
    //############################################
    public static int ide = 0;
    public static List<AcHorario> listaHorario = new ArrayList<AcHorario>();
//    public int aula_id_aux;
//    public String tipo_id_aux;
//    public int docente_id_aux;
//    private int tur_id_aux;
    //############################################
    private static int seccion_id_aux;
    private static int semestre_id_aux;

    public bHorario() {
    }

    public List<ObjNodeGnral> getNodos() {
        return nodos;
    }

    public void setNodos(List<ObjNodeGnral> nodos) {
        this.nodos = nodos;
    }

    public String getN_cur_aperturado() {
        return n_cur_aperturado;
    }

    public void setN_cur_aperturado(String n_cur_aperturado) {
        this.n_cur_aperturado = n_cur_aperturado;
    }

    public int getId_sec_horario() {
        if (seccion_id_aux != 0) {
            return seccion_id_aux;
        } else {
            return id_sec_horario;
        }
    }

    public void setId_sec_horario(int id_sec_horario) {
        this.id_sec_horario = id_sec_horario;
    }

    public int getId_sem() {
        return id_sem;
    }

    public void setId_sem(int id_sem) {
        this.id_sem = id_sem;
    }

    public int getId_sem_horario() {
        if (seccion_id_aux != 0) {
            return semestre_id_aux;
        } else {
            return id_sem_horario;
        }
    }

    public void setId_sem_horario(int id_sem_horario) {
        this.id_sem_horario = id_sem_horario;
    }

    public String getNodoSeleccionado() {
        return nodoSeleccionado;
    }

    public void setNodoSeleccionado(String nodoSeleccionado) {
        this.nodoSeleccionado = nodoSeleccionado;
    }

    public List getListaSecciones() {
        return listaSecciones;
    }

    public void setListaSecciones(List listaSecciones) {
        this.listaSecciones = listaSecciones;
    }

    public TreeNode getArbol() {
        if (arbol == null) {
            cargarArbol();
        }
        return arbol;
    }

    public void setArbol(TreeNode arbol) {
        this.arbol = arbol;
    }

    public int getId_sec() {
        return id_sec;
    }

    public void setId_sec(int id_sec) {
        this.id_sec = id_sec;
    }

    public String getCodigo_sec() {
        return codigo_sec;
    }

    public void setCodigo_sec(String codigo_sec) {
        this.codigo_sec = codigo_sec;
    }

    public String getNombre_sec() {
        return nombre_sec;
    }

    public void setNombre_sec(String nombre_sec) {
        this.nombre_sec = nombre_sec;
    }

    public int getVacantes_sec() {
        return vacantes_sec;
    }

    public void setVacantes_sec(int vacantes_sec) {
        this.vacantes_sec = vacantes_sec;
    }

    public int getId_hor() {
        return id_hor;
    }

    public void setId_hor(int id_hor) {
        this.id_hor = id_hor;
    }

    public String getInicio_hor() {
        return inicio_hor;
    }

    public void setInicio_hor(String inicio_hor) {
        this.inicio_hor = inicio_hor;
    }

    public String getFin_hor() {
        return fin_hor;
    }

    public void setFin_hor(String fin_hor) {
        this.fin_hor = fin_hor;
    }

    public String getLunes_hor() {
        return lunes_hor;
    }

    public void setLunes_hor(String lunes_hor) {
        this.lunes_hor = lunes_hor;
    }

    public String getMartes_hor() {
        return martes_hor;
    }

    public void setMartes_hor(String martes_hor) {
        this.martes_hor = martes_hor;
    }

    public String getMiercoles_hor() {
        return miercoles_hor;
    }

    public void setMiercoles_hor(String miercoles_hor) {
        this.miercoles_hor = miercoles_hor;
    }

    public String getJueves_hor() {
        return jueves_hor;
    }

    public void setJueves_hor(String jueves_hor) {
        this.jueves_hor = jueves_hor;
    }

    public String getViernes_hor() {
        return viernes_hor;
    }

    public void setViernes_hor(String viernes_hor) {
        this.viernes_hor = viernes_hor;
    }

    public String getSabado_hor() {
        return sabado_hor;
    }

    public void setSabado_hor(String sabado_hor) {
        this.sabado_hor = sabado_hor;
    }

    public String getDomingo_hor() {
        return domingo_hor;
    }

    public void setDomingo_hor(String domingo_hor) {
        this.domingo_hor = domingo_hor;
    }

    public int getTurno_id() {
        return turno_id;
    }

    public void setTurno_id(int turno_id) {
        this.turno_id = turno_id;
    }

    public int getDocente_id() {
        return docente_id;
    }

    public void setDocente_id(int docente_id) {
        this.docente_id = docente_id;
    }

    public String getOncomplete() {
        return oncomplete;
    }

    public void setOncomplete(String oncomplete) {
        this.oncomplete = oncomplete;
    }

    public SelectItem[] getComboDocentes() throws Exception {
        HSDocenteDAO dao = (HSDocenteDAO) ServiceFinder.findBean("SpringHibernateDaoDocente");
        List<AcDocente> docentes = dao.seleccionarDocente();
        comboDocentes = new SelectItem[docentes.size() + 1];
        comboDocentes[0] = new SelectItem(0, "[Seleccione]");
        for (int i = 0; i < comboDocentes.length - 1; i++) {
            comboDocentes[i + 1] = new SelectItem(docentes.get(i).getId(), docentes.get(i).getDocNombre());
        }
        return comboDocentes;
    }

    public void setComboDocentes(SelectItem[] comboDocentes) {
        this.comboDocentes = comboDocentes;
    }

    public SelectItem[] getComboTurnos() {
        HSTurnoDAO dao = (HSTurnoDAO) ServiceFinder.findBean("HibernateSpringDaoTurno");
        List<AcTurno> turnos = dao.seleccionarTurno(semestre_id_aux);
        comboTurnos = new SelectItem[turnos.size() + 1];
        comboTurnos[0] = new SelectItem(0, "[Seleccione]");
        for (int i = 0; i < comboTurnos.length - 1; i++) {
            comboTurnos[i + 1] = new SelectItem(turnos.get(i).getId(), turnos.get(i).getTurNombre());
        }
        return comboTurnos;
    }

    public void setComboTurnos(SelectItem[] comboTurnos) {
        this.comboTurnos = comboTurnos;
    }

    public SelectItem[] getComboAulas() throws Exception {
        HSAulaDAO dao = (HSAulaDAO) ServiceFinder.findBean("SpringHibernateDaoAula");
        List<AcAula> aulas = dao.seleccionarAula();
        comboAulas = new SelectItem[aulas.size() + 1];
        comboAulas[0] = new SelectItem(0, "[Seleccione]");
        for (int i = 0; i < comboAulas.length - 1; i++) {
            comboAulas[i + 1] = new SelectItem(aulas.get(i).getId(), aulas.get(i).getAulDes());
        }
        return comboAulas;
    }

    public void setComboAulas(SelectItem[] comboAulas) {
        this.comboAulas = comboAulas;
    }

    public SelectItem[] getComboTipos() throws Exception {
        HSCatalogoDAO dao = (HSCatalogoDAO) ServiceFinder.findBean("SpringHibernateDaoCatalogo");
        List<TbCatalogo> lista = dao.seleccionarCatalogo("018");
        SelectItem[] cmbTipos = new SelectItem[lista.size()];
        for (int i = 0; i < cmbTipos.length; i++) {
            TbCatalogo cat = lista.get(i);
            cmbTipos[i] = new SelectItem(cat.getCatCodigoGrupo() + cat.getCatCodigoElemento(),
                    cat.getCatDescripcionElemento());
        }
        return cmbTipos;
    }

    public void setComboTipos(SelectItem[] comboTipos) {
        this.comboTipos = comboTipos;
    }

    public int getAula_id() {
        return this.aula_id;
    }

    public void setAula_id(int aula_id) {
        this.aula_id = aula_id;
    }

    public String getTipo_id() {
        return this.tipo_id;
    }

    public void setTipo_id(String tipo_id) {
        this.tipo_id = tipo_id;
    }

    public int getIndice_id_lun() {
        return indice_id_lun;
    }

    public void setIndice_id_lun(int indice_id_lun) {
        this.indice_id_lun = indice_id_lun;
    }

    public int getIndice_id_mar() {
        return indice_id_mar;
    }

    public void setIndice_id_mar(int indice_id_mar) {
        this.indice_id_mar = indice_id_mar;
    }

    public int getIndice_id_mie() {
        return indice_id_mie;
    }

    public void setIndice_id_mie(int indice_id_mie) {
        this.indice_id_mie = indice_id_mie;
    }

    public int getIndice_id_jue() {
        return indice_id_jue;
    }

    public void setIndice_id_jue(int indice_id_jue) {
        this.indice_id_jue = indice_id_jue;
    }

    public int getIndice_id_vie() {
        return indice_id_vie;
    }

    public void setIndice_id_vie(int indice_id_vie) {
        this.indice_id_vie = indice_id_vie;
    }

    public int getIndice_id_sab() {
        return indice_id_sab;
    }

    public void setIndice_id_sab(int indice_id_sab) {
        this.indice_id_sab = indice_id_sab;
    }

    public int getIndice_id_dom() {
        return indice_id_dom;
    }

    public void setIndice_id_dom(int indice_id_dom) {
        this.indice_id_dom = indice_id_dom;
    }

    public void cargarArbol() {
        try {
            String estructura = ArmarEstructura();
            StringBuffer buffer = new StringBuffer(estructura);
            ByteArrayInputStream estructura_arbol = new ByteArrayInputStream(buffer.toString().getBytes("ISO-8859-1"));
            Properties properties = new Properties();
            properties.load(estructura_arbol);
            arbol = new TreeNodeImpl();
            agregarNodos(null, arbol, properties);
        } catch (IOException ioe) {
            System.out.println("No se pudo cargar el arbol");
        } catch (Exception e) {
        }
    }

    private void agregarNodos(String path, TreeNode node, Properties properties) {
        boolean end = false;
        int counter = 1;
        while (!end) {
            String key = path != null ? path + '.' + counter : String.valueOf(counter);
            String value = properties.getProperty(key);
            if (value != null) {
                TreeNodeImpl nodo = new TreeNodeImpl();
                nodo.setData(value);
                node.addChild(new Integer(counter), nodo);
                agregarNodos(key, nodo, properties);
                counter++;
            } else {
                end = true;
            }
        }
    }

    public String ArmarEstructura() throws Exception {
        int b = 0;
        int m = 0;

        String estructura = "";
        String estructura_facultades = "";
        String estructura_especialidades = "";
        String estructura_curape = "";
        String estructura_semestres = "";
        HSSemestreDAO dao_s = (HSSemestreDAO) ServiceFinder.findBean("SpringHibernateDaoSemestre");
        //List<AcSemestre> lista_semestres = dao_s.seleccionarSemestreVigente();
        List<AcSemestre> lista_semestres = dao_s.seleccionarSemestreVigenteH();
        HSFacultadDAO dao = (HSFacultadDAO) ServiceFinder.findBean("SpringHibernateDaoFacultad");
        List<AcFacultad> lista_facultad = dao.seleccionarFacultad("", "");

        List<ObjNodeGnral> tmp_nodos = new ArrayList<ObjNodeGnral>();
        if (lista_facultad.size() != 0) {
            for (int i = 0; i < lista_facultad.size(); i++) {
                estructura_facultades += (i + 1) + "=" + ((AcFacultad) lista_facultad.get(i)).getFacNombre() + "\n";
                Set<AcEspecialidad> esp = new LinkedHashSet<AcEspecialidad>();
                esp = lista_facultad.get(i).getAcEspecialidads();
                List<AcEspecialidad> lista_especialidad = Collections.synchronizedList(new LinkedList(esp));

                if (!lista_especialidad.isEmpty()) {
                    for (int j = 0; j < lista_especialidad.size(); j++) {
                        estructura_especialidades += (i + 1) + "." + (j + 1) + "=" + ((AcEspecialidad) lista_especialidad.get(j)).getEspNombre() + "\n";

                        if (!lista_semestres.isEmpty()) {
                            for (int w = 0; w < lista_semestres.size(); w++) {
                                estructura_semestres += (i + 1) + "." + (j + 1) + "." + (w + 1) + "=" + lista_semestres.get(w).getSemNombre() + "\n";
                                HSAperturaCursosDAO daoCurso = (HSAperturaCursosDAO) ServiceFinder.findBean("SpringHibernateDaoCursoAperturado");
                                int f = lista_especialidad.get(j).getId();
                                List<AcCursoAperturado> lista_curso_aperturado = daoCurso.seleccionarAperturaporEspecialidad(f, lista_semestres.get(w).getId());

                                if (!lista_curso_aperturado.isEmpty()) {
                                    List<Integer> ultimos_digitos = new ArrayList<Integer>();
                                    ultimos_digitos.add(-1);
                                    int contador = 0;
                                    for (int k = 0; k < lista_curso_aperturado.size(); k++) {
                                        m = contador;
                                        int a = aInteger(lista_curso_aperturado.get(k).getPlancur().getPlancurCiclo().toString().substring(5, 6));
                                        HSCatalogoDAO cat = (HSCatalogoDAO) ServiceFinder.findBean("SpringHibernateDaoCatalogo");
                                        int y = verificarIndice(a, ultimos_digitos);
                                        estructura_curape += (i + 1) + "." + (j + 1) + "." + (w + 1) + "." + y + "="
                                                + cat.seleccionarDescripcion(lista_curso_aperturado.get(k).getPlancur().getPlancurCiclo()) + "\n";
                                        if (b != y) {
                                            m = 0;
                                            contador = 0;
                                        }
                                        estructura_curape += (i + 1) + "." + (j + 1) + "." + (w + 1) + "." + y + "." + (m + 1) + "="
                                                + lista_curso_aperturado.get(k).getPlancur().getCur().getCurNombre() + "\n";
                                        b = y;
                                        tmp_nodos.add(new ObjNodeGnral((i + 1) + ":" + (j + 1) + ":" + (w + 1) + ":" + y + ":" + (m + 1),
                                                lista_curso_aperturado.get(k).getId(),
                                                lista_curso_aperturado.get(k).getPlancur().getCur().getCurNombre(),
                                                lista_semestres.get(w).getId()));
                                        contador++;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        estructura = estructura_facultades + estructura_especialidades + estructura_semestres + estructura_curape;
        this.setListaSecciones(null);
        this.setNodos(new ArrayList<ObjNodeGnral>(tmp_nodos));
        return estructura;
    }

    public int verificarIndice(int ultimo_digito, List<Integer> ultimos_digitos) {
        int estado = 0;
        int grupo = 0;
        for (int i = 0; i < ultimos_digitos.size(); i++) {
            if (ultimos_digitos.get(i).intValue() == ultimo_digito) {
                estado = 1;
                grupo = i;
                break;
            }
        }
        if (estado == 0) {
            ultimos_digitos.add(ultimo_digito);
            grupo = ultimos_digitos.size() - 1;
        }
        return grupo;
    }

    private int buscarNodo(String id) {
        for (int i = 0; i < nodos.size(); i++) {
            ObjNodeGnral nodo = nodos.get(i);
            if (nodo.getId().equalsIgnoreCase(id)) {
                return i;
            }
        }
        return -1;
    }

    public void Seleccion(NodeSelectedEvent event) {
        try {
            UITree tree = (UITree) event.getComponent();
            String rowKey = tree.getRowKey().toString();

            int length = rowKey.length();
            if (length >= 9) {
                int pos = buscarNodo(rowKey);

                ObjNodeGnral nodo = nodos.get(pos);

                int id_curape = nodo.getCurape_id();
                int id_semape = nodo.getSem_id();
                String nombre_curape = nodo.getCur_nom();
                mostrarTablaSecciones(id_curape, id_semape, nombre_curape);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void mostrarTablaSecciones(int id_curape, int id_semape, String nombre_curape) throws Exception {
        HSSeccionDAO dao = (HSSeccionDAO) ServiceFinder.findBean("HibernateSpringDaoSeccion");
        List<AcSeccion> lista = dao.seleccionarSecciones(id_curape);
        List horarios = new ArrayList();
        for (int i = 0; i < lista.size(); i++) {
            HSMatriculaDAO matricula = (HSMatriculaDAO) ServiceFinder.findBean("SpringHibernateDaoMatricula");
            bHorario horario = new bHorario();
            horario.setId_sec(lista.get(i).getId());
            horario.setCodigo_sec(lista.get(i).getSecCodigo());
            horario.setNombre_sec(lista.get(i).getSecNombre());
            horario.setVacantes_sec(lista.get(i).getSecVacantes());
            horario.setVacantesOcupadas(String.valueOf(matricula.seleccionarMatriculas(lista.get(i).getId()).size()));
            horario.setId_sem(id_semape);

            horarios.add(horario);
        }
        this.setN_cur_aperturado(nombre_curape);
        this.setListaSecciones(horarios);
    }

    public void AsignarHorario(ActionEvent event) throws Exception {
        UIParameter id = (UIParameter) event.getComponent().findComponent("id_seccion");
        UIParameter id_semestre = (UIParameter) event.getComponent().findComponent("id_semestre");

        seccion_id_aux = aInteger(id.getValue().toString());
        semestre_id_aux = aInteger(id_semestre.getValue().toString());

        limpiar();
        mostrarTablaHorarios();
    }

    public void limpiar() {
        listaHorario.clear();
//        aula_id_aux = 0;
//        docente_id_aux = 0;
//        tur_id_aux = 0;
        this.aula_id = 0;
        this.docente_id = 0;
        this.turno_id = 0;
    }

    public void mostrarTablaHorarios() throws Exception {
        HSTurnoDetalleDAO dao = (HSTurnoDetalleDAO) ServiceFinder.findBean("HibernateSpringDaoTurnoDetalle");
        int tur_id_aux = this.getTurno_id();
        List lista = dao.seleccionarTurnoDetalle(tur_id_aux);
        HSTurnoDAO daoTurno = (HSTurnoDAO) ServiceFinder.findBean("HibernateSpringDaoTurno");

        int tiempo;
        AcTurno tmpTurno = daoTurno.obtenerTurno(tur_id_aux);
        if (tmpTurno != null) {
            tiempo = daoTurno.obtenerTurno(tur_id_aux).getTurTiempoPeriodo();
        } else {
            tiempo = 0;
        }
        List<bHorario> lista_horario = new ArrayList<bHorario>();
        bHorario horario;
        for (int i = 0; i < lista.size(); i++) {
            Object O[] = (Object[]) lista.get(i);
            horario = new bHorario();
            horario.setId_hor(aInteger(O[0].toString()));
            horario.setInicio_hor(O[1].toString());
            int j = i + 1;
            Object P[];
            if (j == lista.size()) {
                P = (Object[]) lista.get(i);
                P[1] = suma(P[1].toString(), tiempo);
            } else {
                P = (Object[]) lista.get(j);
            }
            horario.setFin_hor(P[1].toString());
            llenarDias(horario, Integer.valueOf(O[0].toString()), seccion_id_aux);
            lista_horario.add(horario);
        }
        this.setTablaHorario(lista_horario);
    }

    private String suma(String hora, int minutos) {
        int minutos_t = aInteger(hora.substring(0, 2)) * 60 + aInteger(hora.substring(3, 5));
        int ho = (minutos_t + minutos) / 60;
        int mi = (minutos_t + minutos) % 60;
        return (ho + ":" + mi + ":00");
    }

    public void llenarDias(bHorario horario, Integer id_turno, int seccion) {
        HSHorarioDAO dao = (HSHorarioDAO) ServiceFinder.findBean("SpringHibernateDaoHorario");
        List<AcHorario> horarios = dao.seleccionarHorario(seccion);
        for (int i = 0; i < horarios.size(); i++) {
            if ((horarios.get(i).getTurdet().getId()).compareTo(id_turno) == 0) {
                String dias = horarios.get(i).getHorDia();
                String mensaje = "id: " + horarios.get(i).getId()
                        + " doc: " + horarios.get(i).getDoc().getDocNombre()
                        + " aul:" + horarios.get(i).getAul().getAulDes()
                        + " sec:" + horarios.get(i).getSec().getSecNombre()
                        + " tur:" + horarios.get(i).getTurdet().getId()
                        + " tipo:" + horarios.get(i).getHorTipoClase();

                if (dias.equals("016001")) {
                    horario.setLunes_hor(mensaje);
                    horario.setIndice_id_lun(horarios.get(i).getId());
                }
                if (dias.equals("016002")) {
                    horario.setMartes_hor(mensaje);
                    horario.setIndice_id_mar(horarios.get(i).getId());
                }
                if (dias.equals("016003")) {
                    horario.setMiercoles_hor(mensaje);
                    horario.setIndice_id_mie(horarios.get(i).getId());
                }
                if (dias.equals("016004")) {
                    horario.setJueves_hor(mensaje);
                    horario.setIndice_id_jue(horarios.get(i).getId());
                }
                if (dias.equals("016005")) {
                    horario.setViernes_hor(mensaje);
                    horario.setIndice_id_vie(horarios.get(i).getId());
                }
                if (dias.equals("016006")) {
                    horario.setSabado_hor(mensaje);
                    horario.setIndice_id_sab(horarios.get(i).getId());
                }
                if (dias.equals("016007")) {
                    horario.setDomingo_hor(mensaje);
                    horario.setIndice_id_dom(horarios.get(i).getId());
                }
            }
        }
    }

    public List getTablaHorario() {
        return tablaHorario;
    }

    public void setTablaHorario(List tablaHorario) {
        this.tablaHorario = tablaHorario;
    }

    public void seleccionarLunes(ActionEvent event) {
        UIOutput lunes = (UIOutput) event.getComponent().findComponent("lunes");

        UIParameter id_turno = (UIParameter) event.getComponent().findComponent("param_id_turno");
        UIParameter ho_aula = (UIParameter) event.getComponent().findComponent("ho_aula");
        UIParameter ho_tipo = (UIParameter) event.getComponent().findComponent("ho_tipo");
        UIParameter ho_docente = (UIParameter) event.getComponent().findComponent("ho_docente");

        int aula_id_aux = aInteger(ho_aula.getValue().toString());
        String tipo_id_aux = ho_tipo.getValue().toString();
        int docente_id_aux = aInteger(ho_docente.getValue().toString());

        if (lunes.getValue().toString().equals("")) {
            System.out.println("identificador: " + ide);
            System.out.println("aula: " + aula_id_aux);
            System.out.println("tipo: " + tipo_id_aux);
            System.out.println("doc: " + docente_id_aux);

            int agregar = agregarHorario(ide, "016001", aula_id_aux, this.getId_sec_horario(),
                    aInteger(id_turno.getValue().toString()), tipo_id_aux, docente_id_aux, "1");
            if (agregar == 1) {
                this.setIndice_id_lun(ide + 1);
                this.setLunes_hor("ide" + (ide + 1) + this.getN_cur_aperturado()
                        + "<br>t:" + id_turno.getValue().toString()
                        + "<br> a:" + aula_id_aux + "<br> s:" + this.getId_sec_horario()
                        + "<br> tipo:" + tipo_id_aux + "<br> doc:" + docente_id_aux);
            }
        } else {
            this.setLunes_hor("");
            quitarHorario(event, 1);
        }
    }

    public void seleccionarMartes(ActionEvent event) {
        UIOutput martes = (UIOutput) event.getComponent().findComponent("martes");

        UIParameter id_turno = (UIParameter) event.getComponent().findComponent("param_id_turno");
        UIParameter ho_aula = (UIParameter) event.getComponent().findComponent("ho_aula");
        UIParameter ho_tipo = (UIParameter) event.getComponent().findComponent("ho_tipo");
        UIParameter ho_docente = (UIParameter) event.getComponent().findComponent("ho_docente");

        int aula_id_aux = aInteger(ho_aula.getValue().toString());
        String tipo_id_aux = ho_tipo.getValue().toString();
        int docente_id_aux = aInteger(ho_docente.getValue().toString());

        if (martes.getValue().toString().equals("")) {
            System.out.println("identificador: " + ide);
            System.out.println("aula: " + aula_id_aux);
            System.out.println("tipo: " + tipo_id_aux);
            System.out.println("doc: " + docente_id_aux);

            int agregar = agregarHorario(ide, "016002", aula_id_aux, this.getId_sec_horario(),
                    aInteger(id_turno.getValue().toString()), tipo_id_aux, docente_id_aux, "1");
            if (agregar == 1) {
                this.setIndice_id_mar(ide + 1);
                this.setMartes_hor("ide" + (ide + 1) + this.getN_cur_aperturado()
                        + "<br> t:" + id_turno.getValue().toString()
                        + "<br> a:" + aula_id_aux + "<br> s:" + this.getId_sec_horario()
                        + "<br> tipo:" + tipo_id_aux + "<br> doc:" + docente_id_aux);
            }
        } else {
            this.setMartes_hor("");
            quitarHorario(event, 2);
        }
    }

    public void seleccionarMiercoles(ActionEvent event) {
        UIOutput miercoles = (UIOutput) event.getComponent().findComponent("miercoles");

        UIParameter id_turno = (UIParameter) event.getComponent().findComponent("param_id_turno");
        UIParameter ho_aula = (UIParameter) event.getComponent().findComponent("ho_aula");
        UIParameter ho_tipo = (UIParameter) event.getComponent().findComponent("ho_tipo");
        UIParameter ho_docente = (UIParameter) event.getComponent().findComponent("ho_docente");

        int aula_id_aux = aInteger(ho_aula.getValue().toString());
        String tipo_id_aux = ho_tipo.getValue().toString();
        int docente_id_aux = aInteger(ho_docente.getValue().toString());

        if (miercoles.getValue().toString().equals("")) {
            System.out.println("identificador: " + ide);
            System.out.println("aula: " + aula_id_aux);
            System.out.println("tipo: " + tipo_id_aux);
            System.out.println("doc: " + docente_id_aux);

            int agregar = agregarHorario(ide, "016003", aula_id_aux, this.getId_sec_horario(),
                    aInteger(id_turno.getValue().toString()), tipo_id_aux, docente_id_aux, "1");
            if (agregar == 1) {
                this.setIndice_id_mie(ide + 1);
                this.setMiercoles_hor("ide" + (ide + 1) + this.getN_cur_aperturado()
                        + "<br>t:" + id_turno.getValue().toString()
                        + "<br> a:" + aula_id_aux + "<br> s:" + this.getId_sec_horario()
                        + "<br> tipo:" + tipo_id_aux + "<br> doc:" + docente_id_aux);
            }
        } else {
            this.setMiercoles_hor("");
            quitarHorario(event, 3);
        }
    }

    public void seleccionarJueves(ActionEvent event) {
        UIOutput jueves = (UIOutput) event.getComponent().findComponent("jueves");

        UIParameter id_turno = (UIParameter) event.getComponent().findComponent("param_id_turno");
        UIParameter ho_aula = (UIParameter) event.getComponent().findComponent("ho_aula");
        UIParameter ho_tipo = (UIParameter) event.getComponent().findComponent("ho_tipo");
        UIParameter ho_docente = (UIParameter) event.getComponent().findComponent("ho_docente");

        int aula_id_aux = aInteger(ho_aula.getValue().toString());
        String tipo_id_aux = ho_tipo.getValue().toString();
        int docente_id_aux = aInteger(ho_docente.getValue().toString());

        if (jueves.getValue().toString().equals("")) {
            System.out.println("identificador: " + ide);
            System.out.println("aula: " + aula_id_aux);
            System.out.println("tipo: " + tipo_id_aux);
            System.out.println("doc: " + docente_id_aux);

            int agregar = agregarHorario(ide, "016004", aula_id_aux, this.getId_sec_horario(),
                    aInteger(id_turno.getValue().toString()), tipo_id_aux, docente_id_aux, "1");
            if (agregar == 1) {
                this.setIndice_id_jue(ide + 1);
                this.setJueves_hor("ide" + (ide + 1) + this.getN_cur_aperturado()
                        + "<br> t:" + id_turno.getValue().toString()
                        + "<br> a:" + aula_id_aux + "<br> s:" + this.getId_sec_horario()
                        + "<br> tipo:" + tipo_id_aux + "<br> doc:" + docente_id_aux);
            }
        } else {
            this.setJueves_hor("");
            quitarHorario(event, 4);
        }
    }

    public void seleccionarViernes(ActionEvent event) {
        UIOutput viernes = (UIOutput) event.getComponent().findComponent("viernes");

        UIParameter id_turno = (UIParameter) event.getComponent().findComponent("param_id_turno");
        UIParameter ho_aula = (UIParameter) event.getComponent().findComponent("ho_aula");
        UIParameter ho_tipo = (UIParameter) event.getComponent().findComponent("ho_tipo");
        UIParameter ho_docente = (UIParameter) event.getComponent().findComponent("ho_docente");

        int aula_id_aux = aInteger(ho_aula.getValue().toString());
        String tipo_id_aux = ho_tipo.getValue().toString();
        int docente_id_aux = aInteger(ho_docente.getValue().toString());

        if (viernes.getValue().toString().equals("")) {
            System.out.println("identificador: " + ide);
            System.out.println("aula: " + aula_id_aux);
            System.out.println("tipo: " + tipo_id_aux);
            System.out.println("doc: " + docente_id_aux);

            int agregar = agregarHorario(ide, "016005", aula_id_aux, this.getId_sec_horario(),
                    aInteger(id_turno.getValue().toString()), tipo_id_aux, docente_id_aux, "1");
            if (agregar == 1) {
                this.setIndice_id_vie(ide + 1);
                this.setViernes_hor("ide" + (ide + 1) + this.getN_cur_aperturado()
                        + "<br> t:" + id_turno.getValue().toString()
                        + "<br> a:" + aula_id_aux + "<br> s:" + this.getId_sec_horario()
                        + "<br> tipo:" + tipo_id_aux + "<br> doc:" + docente_id_aux);
            }
        } else {
            this.setViernes_hor("");
            quitarHorario(event, 5);
        }
    }

    public void seleccionarSabado(ActionEvent event) {
        UIOutput sabado = (UIOutput) event.getComponent().findComponent("sabado");

        UIParameter id_turno = (UIParameter) event.getComponent().findComponent("param_id_turno");
        UIParameter ho_aula = (UIParameter) event.getComponent().findComponent("ho_aula");
        UIParameter ho_tipo = (UIParameter) event.getComponent().findComponent("ho_tipo");
        UIParameter ho_docente = (UIParameter) event.getComponent().findComponent("ho_docente");

        int aula_id_aux = aInteger(ho_aula.getValue().toString());
        String tipo_id_aux = ho_tipo.getValue().toString();
        int docente_id_aux = aInteger(ho_docente.getValue().toString());

        if (sabado.getValue().toString().equals("")) {
            System.out.println("identificador: " + ide);
            System.out.println("aula: " + aula_id_aux);
            System.out.println("tipo: " + tipo_id_aux);
            System.out.println("doc: " + docente_id_aux);

            int agregar = agregarHorario(ide, "016006", aula_id_aux, this.getId_sec_horario(),
                    aInteger(id_turno.getValue().toString()), tipo_id_aux, docente_id_aux, "1");
            if (agregar == 1) {
                this.setIndice_id_sab(ide + 1);
                this.setSabado_hor("ide" + (ide + 1) + this.getN_cur_aperturado()
                        + "<br> t:" + id_turno.getValue().toString()
                        + "<br> a:" + aula_id_aux + "<br> s:" + this.getId_sec_horario()
                        + "<br> tipo:" + tipo_id_aux + "doc:" + docente_id_aux);
            }
        } else {
            this.setSabado_hor("");
            quitarHorario(event, 6);
        }
    }

    public void seleccionarDomingo(ActionEvent event) {
        UIOutput domingo = (UIOutput) event.getComponent().findComponent("domingo");

        UIParameter id_turno = (UIParameter) event.getComponent().findComponent("param_id_turno");
        UIParameter ho_aula = (UIParameter) event.getComponent().findComponent("ho_aula");
        UIParameter ho_tipo = (UIParameter) event.getComponent().findComponent("ho_tipo");
        UIParameter ho_docente = (UIParameter) event.getComponent().findComponent("ho_docente");

        int aula_id_aux = aInteger(ho_aula.getValue().toString());
        String tipo_id_aux = ho_tipo.getValue().toString();
        int docente_id_aux = aInteger(ho_docente.getValue().toString());

        if (domingo.getValue().toString().equals("")) {
            System.out.println("identificador: " + ide);
            System.out.println("aula: " + aula_id_aux);
            System.out.println("tipo: " + tipo_id_aux);
            System.out.println("doc: " + docente_id_aux);

            int agregar = agregarHorario(ide, "016007", aula_id_aux, this.getId_sec_horario(),
                    aInteger(id_turno.getValue().toString()), tipo_id_aux, docente_id_aux, "1");
            if (agregar == 1) {
                this.setIndice_id_dom(ide + 1);
                this.setDomingo_hor("ide" + (ide + 1) + this.getN_cur_aperturado()
                        + "<br> t:" + id_turno.getValue().toString()
                        + "<br> a:" + aula_id_aux + "<br> s:" + this.getId_sec_horario()
                        + "<br> tipo:" + tipo_id_aux + "doc:" + docente_id_aux);
            }
        } else {
            this.setDomingo_hor("");
            quitarHorario(event, 7);
        }
    }

    public int agregarHorario(int identificador, String dia, int aula, int seccion, int turno, String tipo, int docente, String activo) {
        if (aula == 0) {
            this.setOncomplete("javascript:alert('Ingrese Aula.')");
            return 0;
        } else if (docente == 0) {
            this.setOncomplete("javascript:alert('Ingrese Docente.')");
            return 0;
        } else {
            AcHorario horario = new AcHorario();
            AcDocente doc = new AcDocente();
            doc.setId(docente);
            AcAula aul = new AcAula();
            aul.setId(aula);
            AcSeccion sec = new AcSeccion();
            sec.setId(seccion);
            AcTurnoDetalle turdet = new AcTurnoDetalle();
            turdet.setId(turno);
            horario.setId(identificador);
            horario.setAul(aul);
            horario.setHorActivo(activo);
            horario.setHorDia(dia);
            horario.setSec(sec);
            horario.setTurdet(turdet);
            horario.setHorCreacion(new Date());
            horario.setHorTipoClase(tipo);
            horario.setDoc(doc);
            listaHorario.add(horario);
            System.out.println("identificador: " + identificador + "\tide: " + ide + "\tsize: " + listaHorario.size());
            ide--;
            this.setOncomplete("");
            return 1;
        }
    }

    public void quitarHorario(ActionEvent event, int dia) {
        UIParameter id_ident;
        switch (dia) {
            case 1:
                id_ident = (UIParameter) event.getComponent().findComponent("param_identificador_lunes");
                break;
            case 2:
                id_ident = (UIParameter) event.getComponent().findComponent("param_identificador_martes");
                break;
            case 3:
                id_ident = (UIParameter) event.getComponent().findComponent("param_identificador_miercoles");
                break;
            case 4:
                id_ident = (UIParameter) event.getComponent().findComponent("param_identificador_jueves");
                break;
            case 5:
                id_ident = (UIParameter) event.getComponent().findComponent("param_identificador_viernes");
                break;
            case 6:
                id_ident = (UIParameter) event.getComponent().findComponent("param_identificador_sabado");
                break;
            default:
                id_ident = (UIParameter) event.getComponent().findComponent("param_identificador_domingo");
        }

        if (aInteger(id_ident.getValue().toString()) > 0) {
            HSHorarioDAO horario = (HSHorarioDAO) ServiceFinder.findBean("SpringHibernateDaoHorario");
            AcHorario hora = horario.seleccionarUnHorario(aInteger(id_ident.getValue().toString()));
            agregarHorario(hora.getId(), hora.getHorDia(), hora.getAul().getId(),
                    hora.getSec().getId(), hora.getTurdet().getId(),
                    hora.getHorTipoClase(), hora.getDoc().getId(), "0");
        }
        if (aInteger(id_ident.getValue().toString()) <= 0) {
            listaHorario.remove(encontrarIndice(aInteger(id_ident.getValue().toString())));
        }
    }

    private int encontrarIndice(int identificador) {
        for (int i = 0; i < listaHorario.size(); i++) {
            if (listaHorario.get(i).getId() == identificador) {
                return i;
            }
        }
        return -1;
    }

    public void Insertar(ActionEvent event) {
        HSHorarioDAO dao = (HSHorarioDAO) ServiceFinder.findBean("SpringHibernateDaoHorario");

//        for (int i = 0; i < listaHorario.size(); i++) {
//            System.out.println("\tid horario: " + listaHorario.get(i).getId());
//            System.out.println("\tsec nombre: " + listaHorario.get(i).getSec().getSecNombre());
//            System.out.println("\tturno detalle hora: " + listaHorario.get(i).getTurdet().getTurdetHora());
//            System.out.println("\tcreacion: " + listaHorario.get(i).getHorCreacion());
//            System.out.println("\thora dia: " + listaHorario.get(i).getHorDia());
//            System.out.println("\ttipo clase: " + listaHorario.get(i).getHorTipoClase());
//        }
        dao.insertarHorarios(prepararInsercion(listaHorario));
    }

    private List<AcHorario> prepararInsercion(List<AcHorario> lista_horarios) {
        List<AcHorario> lHorarios = new ArrayList<AcHorario>();
        AcHorario horario;
        for (int i = 0; i < lista_horarios.size(); i++) {
            horario = new AcHorario();
            if (lista_horarios.get(i).getId() > 0) {
                horario.setId(lista_horarios.get(i).getId());
            }
            horario.setAul(lista_horarios.get(i).getAul());
            horario.setDoc(lista_horarios.get(i).getDoc());
            horario.setHorActivo(lista_horarios.get(i).getHorActivo());
            horario.setHorTipoClase(lista_horarios.get(i).getHorTipoClase());
            horario.setHorDia(lista_horarios.get(i).getHorDia());
            horario.setTurdet(lista_horarios.get(i).getTurdet());
            horario.setSec(lista_horarios.get(i).getSec());
            horario.setHorCreacion(lista_horarios.get(i).getHorCreacion());
            lHorarios.add(horario);
        }
        return lHorarios;
    }

    public void setearTurno() throws Exception {
        mostrarTablaHorarios();
    }

    public String getVacantesOcupadas() {
        return vacantesOcupadas;
    }

    public void setVacantesOcupadas(String vacantesOcupadas) {
        this.vacantesOcupadas = vacantesOcupadas;
    }

    private int aInteger(String cadena) {
        try {
            return Integer.parseInt(cadena.trim());
        } catch (NumberFormatException nfe) {
            return -1;
        }
    }
}
