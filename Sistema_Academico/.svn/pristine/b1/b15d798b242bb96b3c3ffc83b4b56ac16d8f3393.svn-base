package net.uch.academica.hibernateSpringDao;

import java.util.ArrayList;
import java.util.List;
import net.uch.academica.managedBeans.beans.BeanDuplicadoHorario;
import net.uch.mapping.AcHorario;
import org.hibernate.Hibernate;
import org.hibernate.Query;
import org.hibernate.criterion.Expression;
import org.springframework.dao.DataAccessException;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

public class HSHorarioDAOImpl extends HibernateDaoSupport implements HSHorarioDAO {

    @Override
    public void insertarHorarios(List<AcHorario> horarios) throws DataAccessException {
        this.getHibernateTemplate().saveOrUpdateAll(horarios);
    }

    @Override
    public List seleccionarHorario(int sec) throws DataAccessException {
        return this.getSession().createCriteria(AcHorario.class).
                add(Expression.eq("HorActivo", "1")).
                add(Expression.eq("Sec.Id", sec)).list();
    }

    @Override
    public AcHorario seleccionarUnHorario(int id_hor) throws DataAccessException {
        return (AcHorario) this.getSession().createCriteria(AcHorario.class).add(Expression.eq("HorActivo", "1")).add(Expression.eq("Id", id_hor)).uniqueResult();
    }

    @Override
    public List duplicidadHoraria(String sec_ids) throws DataAccessException {
        List<BeanDuplicadoHorario> lista = new ArrayList<BeanDuplicadoHorario>();

        String sql = "select master.hor_dia as horDia, "
                + "master.turdet_hora as turdetHora, "
                + "master.cur_nombre as curNombre, "
                + "master.cadena as candenaCurso, "
                + "master.cantidad as cantidadCurso "
                + "from( "
                + "select tabla.sec_id, tabla.hor_dia, tabla.turdet_hora, tabla.cur_nombre, group_concat(tabla.cur_nombre separator ' <br /> ' ) cadena  ,count(*) cantidad "
                + "from ( "
                + "select ac_seccion.sec_id, ac_seccion.sec_nombre, ac_horario.hor_dia, ac_turno_detalle.turdet_hora, ac_turno_detalle.turdet_id, ac_turno.tur_id, concat(ac_seccion.sec_nombre,' ',ac_curso.cur_nombre) cur_nombre, count(*) cantidad "
                + "from ac_seccion inner join ac_horario on ac_seccion.sec_id=ac_horario.sec_id "
                + "inner join ac_turno_detalle on ac_turno_detalle.turdet_id=ac_horario.turdet_id "
                + "inner join ac_turno on ac_turno.tur_id=ac_turno_detalle.tur_id "
                + "inner join ac_curso_aperturado on ac_curso_aperturado.curape_Id=ac_seccion.curape_id "
                + "inner join ac_plan_curso on ac_plan_curso.plancur_Id=ac_curso_aperturado.plancur_id "
                + "inner join ac_curso on ac_curso.cur_id=ac_plan_curso.cur_id "
                + "inner join ac_semestre on ac_semestre.sem_id=ac_curso_aperturado.sem_id "
                + "where ac_seccion.sec_activo='1' "
                + "and ac_turno_detalle.turdet_activo='1' "
                + "and ac_turno.tur_activo='1' "
                + "and ac_horario.hor_activo='1' "
                + "and ac_curso_aperturado.curape_activo='1' "
                + "and ac_curso_aperturado.curape_aperturado='1' "
                + "and ac_curso_aperturado.sem_id=19 "
                + "and ac_plan_curso.plancur_activo='1' "
                + "and ac_semestre.sem_activo='1' "
                + "and ac_semestre.sem_actual='1' "
                + "and ac_curso.cur_activo='1' "
                + "and ac_seccion.sec_id in(" + sec_ids + ") "
                + "group by ac_seccion.sec_id, ac_horario.hor_dia, ac_turno_detalle.turdet_hora) tabla "
                + "group by tabla.hor_dia, tabla.turdet_hora) master where master.cantidad>1 "
                + "group by master.sec_id "
                + "order by master.hor_dia, master.turdet_hora; ";

        // System.out.println(sql);//master.hor_dia, master.turdet_hora, master.cur_nombre, master.cadena, master.cantidad
        Query q = this.getSession().createSQLQuery(sql).
                addScalar("horDia", Hibernate.STRING).
                addScalar("turdetHora", Hibernate.STRING).
                addScalar("curNombre", Hibernate.STRING).
                addScalar("candenaCurso", Hibernate.STRING);


        List l = q.list();
        for (int i = 0; i < l.size(); i++) {
            BeanDuplicadoHorario dup = new BeanDuplicadoHorario();
            Object[] objs = (Object[]) l.get(i);
            //for (int j = 0; j < objs.length; j++) {
            dup.setDup_dia(objs[0].toString());
            dup.setDup_hora(objs[1].toString());
            dup.setDup_nombreCurso(objs[2].toString());
            dup.setDup_nombreCursos(objs[3].toString());
            dup.setDup_id(i + 1);
            //System.out.print(object.toString() + "\t");
            // }
           /* System.out.println();
            System.out.println("valor");*/
            lista.add(dup);
        }
        // System.out.println("En total" + l.size());
        return lista;

    }

    @Override
    public int SeleccionarHorarioPorDocente(int doc_id, int sem_id) throws DataAccessException {
        String sql = "select count(*) cantidad \n"
                + "from ac_docente inner join ac_horario on ac_docente.doc_id=ac_horario.doc_id \n"
                + "inner join ac_seccion on ac_seccion.sec_id=ac_horario.sec_id \n"
                + "inner join ac_curso_aperturado on ac_curso_aperturado.curape_Id=ac_seccion.curape_id \n"
                + "inner join ac_turno_detalle on ac_turno_detalle.turdet_id=ac_horario.turdet_id \n"
                + "inner join ac_turno on ac_turno.tur_id=ac_turno_detalle.tur_id \n"
                + "where ac_turno_detalle.turdet_activo='1' \n"
                + "and ac_turno.tur_activo='1' \n"
                + "and ac_seccion.sec_activo='1' \n"
                + "and ac_curso_aperturado.curape_activo='1' \n"
                + "and ac_curso_aperturado.curape_aperturado='1' \n"
                + "and ac_curso_aperturado.sem_id=" + sem_id
                + " and ac_docente.doc_id=" + doc_id;
        Query q = this.getSession().createSQLQuery(sql).
                addScalar("cantidad", Hibernate.INTEGER);
        int valor = Integer.parseInt(q.uniqueResult().toString());
        return valor;
    }
}
